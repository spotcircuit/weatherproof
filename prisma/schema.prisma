// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  company       String?
  phone         String?
  role          UserRole  @default(CONTRACTOR)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  projects      Project[]
  reports       Report[]
  alerts        Alert[]
}

model Project {
  id                String    @id @default(uuid())
  userId            String
  name              String
  description       String?
  address           String
  latitude          Float
  longitude         Float
  startDate         DateTime
  endDate           DateTime?
  active            Boolean   @default(true)
  
  // Weather thresholds stored as JSON
  weatherThresholds Json      @default("{}")
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id])
  weatherReadings   WeatherReading[]
  delayEvents       DelayEvent[]
  reports           Report[]
  alerts            Alert[]
  
  @@index([userId])
  @@index([latitude, longitude])
}

model WeatherReading {
  id              String    @id @default(uuid())
  projectId       String
  timestamp       DateTime
  temperature     Float?
  windSpeed       Float?
  precipitation   Float?
  humidity        Int?
  pressure        Float?
  visibility      Float?
  conditions      String?
  source          String    // 'noaa', 'weather_underground', 'visual_crossing', 'on_site'
  rawData         Json
  
  createdAt       DateTime  @default(now())
  
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId, timestamp])
  @@index([timestamp])
}

model DelayEvent {
  id                  String    @id @default(uuid())
  projectId           String
  startTime           DateTime
  endTime             DateTime?
  weatherCondition    String    // 'high_wind', 'low_temp', 'rain', 'snow', etc.
  thresholdViolated   Json      // Details of which threshold was violated
  affectedActivities  String[]
  estimatedCost       Float?
  laborHoursLost      Float?
  crewSize            Int?
  autoGenerated       Boolean   @default(true)
  verified            Boolean   @default(false)
  notes               String?
  
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  
  project             Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId, startTime])
}

model Report {
  id              String        @id @default(uuid())
  projectId       String
  userId          String
  reportType      ReportType
  periodStart     DateTime
  periodEnd       DateTime
  documentUrl     String?
  metadata        Json?
  totalDelayHours Float?
  totalCost       Float?
  status          ReportStatus  @default(PENDING)
  
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  project         Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User          @relation(fields: [userId], references: [id])
  
  @@index([projectId, periodStart, periodEnd])
  @@index([userId])
}

model Alert {
  id              String      @id @default(uuid())
  projectId       String
  userId          String
  type            AlertType
  severity        Severity
  message         String
  weatherData     Json?
  sent            Boolean     @default(false)
  sentAt          DateTime?
  read            Boolean     @default(false)
  readAt          DateTime?
  
  createdAt       DateTime    @default(now())
  
  project         Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user            User        @relation(fields: [userId], references: [id])
  
  @@index([projectId, sent])
  @@index([userId, read])
}

// Enums
enum UserRole {
  CONTRACTOR
  PROJECT_MANAGER
  ADMIN
  INSURANCE_AGENT
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  INSURANCE_CLAIM
  CUSTOM
}

enum ReportStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

enum AlertType {
  WEATHER_WARNING
  DELAY_DETECTED
  DELAY_ENDED
  THRESHOLD_APPROACHING
  REPORT_READY
}

enum Severity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}